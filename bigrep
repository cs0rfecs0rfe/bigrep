#!/usr/bin/env python3

#---------------------------------------------------------------------------------------
#
#
#
#
#  bigrep - pronounced bi-grep - Searches binary files with regualr expressions
#
#
# 
#---------------------------------------------------------------------------------------
#
#
# Copyright (c) 2019 Robert Ian Ferguson
#
#     This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#---------------------------------------------------------------------------------------
#
#
# Changelog
#
#	18/12/2019 - V1.0 ian.ferguson@abertay.ac.uk
#
#
#---------------------------------------------------------------------------------------





import regex, mmap, argparse


parser = argparse.ArgumentParser()
parser.add_argument("regex", help="See the Python regex command for details of regex format. To specify a char in hex use \\xXX - e.g. \\x41 will match the character 'A'")
parser.add_argument("filename")
parser.add_argument("-r", "--range", help="Print the offset of the start and end of matches", action="store_true")
parser.add_argument("-d", "--display", help="Print the actual match - Careful, it might be binary and/or very big!", action="store_true")
parser.add_argument("-n", "--noDecode", help="Output matches as Unicode code points", action="store_true")
parser.add_argument("-p", "--printRegex", help="Print the regexp - USeful in debugging what shell substitution has done to you regex", action="store_true")
parser.add_argument("-ee", "--expressionEncoding", help="examples include ASCII (default), utf-8, ISO-8859-1", default="ASCII")
parser.add_argument("-oe", "--outputEncoding", help="examples include ASCII (default), utf-8, ISO-8859-1", default="ASCII")

args = parser.parse_args()

if args.printRegex:
	print(args.regex)

with open(args.filename, 'rb') as f:
	data = mmap.mmap(f.fileno(), 0, mmap.MAP_SHARED, mmap.PROT_READ)
	pattern = regex.compile(args.regex.encode(args.expressionEncoding))
	
	findIterator = pattern.finditer(data)
	for match in findIterator:
		if args.range:
			start = match.start()
			end = match.end()
			print (start, end, end='')


		if args.display and args.display:
			print(" ", end='')			

		if args.display:
			if args.noDecode:
				print (match.group(), end='')
			else:
				print (match.group().decode(args.outputEncoding), end='')

		if args.range or args.display:
			print("")

